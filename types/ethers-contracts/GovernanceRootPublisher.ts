/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface GovernanceRootPublisherInterface extends Interface {
    getFunction(nameOrSignature: "getProposalCore" | "isPublished" | "proposals" | "publishProposal" | "updateMetadata"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "ProposalCreated" | "ProposalMetadataUpdated"): EventFragment;

    encodeFunctionData(functionFragment: 'getProposalCore', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'isPublished', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'proposals', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'publishProposal', values: [BigNumberish, BytesLike, BigNumberish, BigNumberish, BytesLike, string]): string;
encodeFunctionData(functionFragment: 'updateMetadata', values: [BigNumberish, string]): string;

    decodeFunctionResult(functionFragment: 'getProposalCore', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isPublished', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'proposals', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'publishProposal', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updateMetadata', data: BytesLike): Result;
  }

  
    export namespace ProposalCreatedEvent {
      export type InputTuple = [proposalId: BigNumberish, proposer: AddressLike, actionDataHash: BytesLike, snapshotBlock: BigNumberish, ER_snapshot: BigNumberish, powerRoot: BytesLike, metadata: string, createdAt: BigNumberish];
      export type OutputTuple = [proposalId: bigint, proposer: string, actionDataHash: string, snapshotBlock: bigint, ER_snapshot: bigint, powerRoot: string, metadata: string, createdAt: bigint];
      export interface OutputObject {proposalId: bigint, proposer: string, actionDataHash: string, snapshotBlock: bigint, ER_snapshot: bigint, powerRoot: string, metadata: string, createdAt: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ProposalMetadataUpdatedEvent {
      export type InputTuple = [proposalId: BigNumberish, metadata: string];
      export type OutputTuple = [proposalId: bigint, metadata: string];
      export interface OutputObject {proposalId: bigint, metadata: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface GovernanceRootPublisher extends BaseContract {
    
    connect(runner?: ContractRunner | null): GovernanceRootPublisher;
    waitForDeployment(): Promise<this>;

    interface: GovernanceRootPublisherInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    getProposalCore: TypedContractMethod<
      [proposalId: BigNumberish, ],
      [[string, string, bigint, bigint, string, string, bigint] & {proposer: string, actionDataHash: string, snapshotBlock: bigint, ER_snapshot: bigint, powerRoot: string, metadata: string, createdAt: bigint }],
      'view'
    >
    

    
    isPublished: TypedContractMethod<
      [proposalId: BigNumberish, ],
      [boolean],
      'view'
    >
    

    
    proposals: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, bigint, bigint, string, string, bigint, bigint] & {proposer: string, actionDataHash: string, snapshotBlock: bigint, ER_snapshot: bigint, powerRoot: string, metadata: string, createdAt: bigint, state: bigint }],
      'view'
    >
    

    
    publishProposal: TypedContractMethod<
      [proposalId: BigNumberish, actionDataHash: BytesLike, snapshotBlock: BigNumberish, ER_snapshot: BigNumberish, powerRoot: BytesLike, metadata: string, ],
      [void],
      'nonpayable'
    >
    

    
    updateMetadata: TypedContractMethod<
      [proposalId: BigNumberish, metadata: string, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'getProposalCore'): TypedContractMethod<
      [proposalId: BigNumberish, ],
      [[string, string, bigint, bigint, string, string, bigint] & {proposer: string, actionDataHash: string, snapshotBlock: bigint, ER_snapshot: bigint, powerRoot: string, metadata: string, createdAt: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'isPublished'): TypedContractMethod<
      [proposalId: BigNumberish, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'proposals'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, bigint, bigint, string, string, bigint, bigint] & {proposer: string, actionDataHash: string, snapshotBlock: bigint, ER_snapshot: bigint, powerRoot: string, metadata: string, createdAt: bigint, state: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'publishProposal'): TypedContractMethod<
      [proposalId: BigNumberish, actionDataHash: BytesLike, snapshotBlock: BigNumberish, ER_snapshot: BigNumberish, powerRoot: BytesLike, metadata: string, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'updateMetadata'): TypedContractMethod<
      [proposalId: BigNumberish, metadata: string, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'ProposalCreated'): TypedContractEvent<ProposalCreatedEvent.InputTuple, ProposalCreatedEvent.OutputTuple, ProposalCreatedEvent.OutputObject>;
getEvent(key: 'ProposalMetadataUpdated'): TypedContractEvent<ProposalMetadataUpdatedEvent.InputTuple, ProposalMetadataUpdatedEvent.OutputTuple, ProposalMetadataUpdatedEvent.OutputObject>;

    filters: {
      
      'ProposalCreated(uint256,address,bytes32,uint256,uint256,bytes32,string,uint256)': TypedContractEvent<ProposalCreatedEvent.InputTuple, ProposalCreatedEvent.OutputTuple, ProposalCreatedEvent.OutputObject>;
      ProposalCreated: TypedContractEvent<ProposalCreatedEvent.InputTuple, ProposalCreatedEvent.OutputTuple, ProposalCreatedEvent.OutputObject>;
    

      'ProposalMetadataUpdated(uint256,string)': TypedContractEvent<ProposalMetadataUpdatedEvent.InputTuple, ProposalMetadataUpdatedEvent.OutputTuple, ProposalMetadataUpdatedEvent.OutputObject>;
      ProposalMetadataUpdated: TypedContractEvent<ProposalMetadataUpdatedEvent.InputTuple, ProposalMetadataUpdatedEvent.OutputTuple, ProposalMetadataUpdatedEvent.OutputObject>;
    
    };
  }