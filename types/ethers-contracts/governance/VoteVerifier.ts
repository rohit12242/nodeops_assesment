/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  
export declare namespace VoteVerifier {
      
    export type VoteDataStruct = {support: BigNumberish, nonce: BigNumberish, deadline: BigNumberish, power: BigNumberish, signature: BytesLike, merkleProof: BytesLike[]}

    export type VoteDataStructOutput = [support: bigint, nonce: bigint, deadline: bigint, power: bigint, signature: string, merkleProof: string[]] & {support: bigint, nonce: bigint, deadline: bigint, power: bigint, signature: string, merkleProof: string[] }
  
    }

  export interface VoteVerifierInterface extends Interface {
    getFunction(nameOrSignature: "DOMAIN_SEPARATOR" | "NAME" | "VERSION" | "VOTE_TYPEHASH" | "adminMarkPassed" | "getTally" | "hasVoted" | "isPassed" | "owner" | "proposalVotes" | "proposals" | "registerProposal" | "renounceOwnership" | "submitVotes" | "transferOwnership"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred" | "ProposalPassed" | "ProposalRegistered" | "VoteCounted"): EventFragment;

    encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string;
encodeFunctionData(functionFragment: 'NAME', values?: undefined): string;
encodeFunctionData(functionFragment: 'VERSION', values?: undefined): string;
encodeFunctionData(functionFragment: 'VOTE_TYPEHASH', values?: undefined): string;
encodeFunctionData(functionFragment: 'adminMarkPassed', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getTally', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'hasVoted', values: [BigNumberish, AddressLike]): string;
encodeFunctionData(functionFragment: 'isPassed', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'proposalVotes', values: [BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'proposals', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'registerProposal', values: [BigNumberish, BytesLike, BytesLike, BigNumberish]): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'submitVotes', values: [BigNumberish, VoteVerifier.VoteDataStruct[]]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;

    decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'NAME', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'VERSION', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'VOTE_TYPEHASH', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'adminMarkPassed', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getTally', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasVoted', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isPassed', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'proposalVotes', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'proposals', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'registerProposal', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'submitVotes', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  }

  
    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ProposalPassedEvent {
      export type InputTuple = [proposalId: BigNumberish, actionDataHash: BytesLike, forVotes: BigNumberish, threshold: BigNumberish];
      export type OutputTuple = [proposalId: bigint, actionDataHash: string, forVotes: bigint, threshold: bigint];
      export interface OutputObject {proposalId: bigint, actionDataHash: string, forVotes: bigint, threshold: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ProposalRegisteredEvent {
      export type InputTuple = [proposalId: BigNumberish, powerRoot: BytesLike, actionDataHash: BytesLike, threshold: BigNumberish];
      export type OutputTuple = [proposalId: bigint, powerRoot: string, actionDataHash: string, threshold: bigint];
      export interface OutputObject {proposalId: bigint, powerRoot: string, actionDataHash: string, threshold: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace VoteCountedEvent {
      export type InputTuple = [proposalId: BigNumberish, voter: AddressLike, support: BigNumberish, power: BigNumberish];
      export type OutputTuple = [proposalId: bigint, voter: string, support: bigint, power: bigint];
      export interface OutputObject {proposalId: bigint, voter: string, support: bigint, power: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface VoteVerifier extends BaseContract {
    
    connect(runner?: ContractRunner | null): VoteVerifier;
    waitForDeployment(): Promise<this>;

    interface: VoteVerifierInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    DOMAIN_SEPARATOR: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    NAME: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    VERSION: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    VOTE_TYPEHASH: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    adminMarkPassed: TypedContractMethod<
      [proposalId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    getTally: TypedContractMethod<
      [proposalId: BigNumberish, ],
      [[bigint, bigint, bigint] & {forVotes: bigint, againstVotes: bigint, abstainVotes: bigint }],
      'view'
    >
    

    
    hasVoted: TypedContractMethod<
      [arg0: BigNumberish, arg1: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    isPassed: TypedContractMethod<
      [proposalId: BigNumberish, ],
      [boolean],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    proposalVotes: TypedContractMethod<
      [arg0: BigNumberish, arg1: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    proposals: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, bigint, boolean, boolean] & {powerRoot: string, actionDataHash: string, threshold: bigint, exists: boolean, passed: boolean }],
      'view'
    >
    

    
    registerProposal: TypedContractMethod<
      [proposalId: BigNumberish, powerRoot: BytesLike, actionDataHash: BytesLike, threshold: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    submitVotes: TypedContractMethod<
      [proposalId: BigNumberish, votes: VoteVerifier.VoteDataStruct[], ],
      [void],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'DOMAIN_SEPARATOR'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'NAME'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'VERSION'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'VOTE_TYPEHASH'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'adminMarkPassed'): TypedContractMethod<
      [proposalId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getTally'): TypedContractMethod<
      [proposalId: BigNumberish, ],
      [[bigint, bigint, bigint] & {forVotes: bigint, againstVotes: bigint, abstainVotes: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'hasVoted'): TypedContractMethod<
      [arg0: BigNumberish, arg1: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'isPassed'): TypedContractMethod<
      [proposalId: BigNumberish, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'proposalVotes'): TypedContractMethod<
      [arg0: BigNumberish, arg1: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'proposals'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, bigint, boolean, boolean] & {powerRoot: string, actionDataHash: string, threshold: bigint, exists: boolean, passed: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'registerProposal'): TypedContractMethod<
      [proposalId: BigNumberish, powerRoot: BytesLike, actionDataHash: BytesLike, threshold: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'submitVotes'): TypedContractMethod<
      [proposalId: BigNumberish, votes: VoteVerifier.VoteDataStruct[], ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'ProposalPassed'): TypedContractEvent<ProposalPassedEvent.InputTuple, ProposalPassedEvent.OutputTuple, ProposalPassedEvent.OutputObject>;
getEvent(key: 'ProposalRegistered'): TypedContractEvent<ProposalRegisteredEvent.InputTuple, ProposalRegisteredEvent.OutputTuple, ProposalRegisteredEvent.OutputObject>;
getEvent(key: 'VoteCounted'): TypedContractEvent<VoteCountedEvent.InputTuple, VoteCountedEvent.OutputTuple, VoteCountedEvent.OutputObject>;

    filters: {
      
      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'ProposalPassed(uint256,bytes32,uint256,uint256)': TypedContractEvent<ProposalPassedEvent.InputTuple, ProposalPassedEvent.OutputTuple, ProposalPassedEvent.OutputObject>;
      ProposalPassed: TypedContractEvent<ProposalPassedEvent.InputTuple, ProposalPassedEvent.OutputTuple, ProposalPassedEvent.OutputObject>;
    

      'ProposalRegistered(uint256,bytes32,bytes32,uint256)': TypedContractEvent<ProposalRegisteredEvent.InputTuple, ProposalRegisteredEvent.OutputTuple, ProposalRegisteredEvent.OutputObject>;
      ProposalRegistered: TypedContractEvent<ProposalRegisteredEvent.InputTuple, ProposalRegisteredEvent.OutputTuple, ProposalRegisteredEvent.OutputObject>;
    

      'VoteCounted(uint256,address,uint8,uint256)': TypedContractEvent<VoteCountedEvent.InputTuple, VoteCountedEvent.OutputTuple, VoteCountedEvent.OutputObject>;
      VoteCounted: TypedContractEvent<VoteCountedEvent.InputTuple, VoteCountedEvent.OutputTuple, VoteCountedEvent.OutputObject>;
    
    };
  }