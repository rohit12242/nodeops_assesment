/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../../common.js"
  

  export interface GovernanceExecutorInterface extends Interface {
    getFunction(nameOrSignature: "adminSetAttested" | "adminSetExecuted" | "attestedPassed" | "executeIfAuthorized" | "executed" | "governancePublisher" | "markProposalPassed" | "owner" | "relayer" | "renounceOwnership" | "setGovernancePublisher" | "setRelayer" | "transferOwnership"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "Executed" | "GovernancePublisherUpdated" | "OwnershipTransferred" | "ProposalAttested" | "RelayerUpdated"): EventFragment;

    encodeFunctionData(functionFragment: 'adminSetAttested', values: [BigNumberish, boolean]): string;
encodeFunctionData(functionFragment: 'adminSetExecuted', values: [BigNumberish, boolean]): string;
encodeFunctionData(functionFragment: 'attestedPassed', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'executeIfAuthorized', values: [BigNumberish, BytesLike]): string;
encodeFunctionData(functionFragment: 'executed', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'governancePublisher', values?: undefined): string;
encodeFunctionData(functionFragment: 'markProposalPassed', values: [BigNumberish, BytesLike]): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'relayer', values?: undefined): string;
encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string;
encodeFunctionData(functionFragment: 'setGovernancePublisher', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'setRelayer', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string;

    decodeFunctionResult(functionFragment: 'adminSetAttested', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'adminSetExecuted', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'attestedPassed', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'executeIfAuthorized', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'executed', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'governancePublisher', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'markProposalPassed', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'relayer', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setGovernancePublisher', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'setRelayer', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  }

  
    export namespace ExecutedEvent {
      export type InputTuple = [proposalId: BigNumberish, target: AddressLike, result: BytesLike];
      export type OutputTuple = [proposalId: bigint, target: string, result: string];
      export interface OutputObject {proposalId: bigint, target: string, result: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace GovernancePublisherUpdatedEvent {
      export type InputTuple = [oldPub: AddressLike, newPub: AddressLike];
      export type OutputTuple = [oldPub: string, newPub: string];
      export interface OutputObject {oldPub: string, newPub: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OwnershipTransferredEvent {
      export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
      export type OutputTuple = [previousOwner: string, newOwner: string];
      export interface OutputObject {previousOwner: string, newOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ProposalAttestedEvent {
      export type InputTuple = [proposalId: BigNumberish, actionDataHash: BytesLike, attestedBy: AddressLike];
      export type OutputTuple = [proposalId: bigint, actionDataHash: string, attestedBy: string];
      export interface OutputObject {proposalId: bigint, actionDataHash: string, attestedBy: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace RelayerUpdatedEvent {
      export type InputTuple = [oldRelayer: AddressLike, newRelayer: AddressLike];
      export type OutputTuple = [oldRelayer: string, newRelayer: string];
      export interface OutputObject {oldRelayer: string, newRelayer: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface GovernanceExecutor extends BaseContract {
    
    connect(runner?: ContractRunner | null): GovernanceExecutor;
    waitForDeployment(): Promise<this>;

    interface: GovernanceExecutorInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    adminSetAttested: TypedContractMethod<
      [proposalId: BigNumberish, val: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    adminSetExecuted: TypedContractMethod<
      [proposalId: BigNumberish, val: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    attestedPassed: TypedContractMethod<
      [arg0: BigNumberish, ],
      [boolean],
      'view'
    >
    

    
    executeIfAuthorized: TypedContractMethod<
      [proposalId: BigNumberish, actionData: BytesLike, ],
      [string],
      'nonpayable'
    >
    

    
    executed: TypedContractMethod<
      [arg0: BigNumberish, ],
      [boolean],
      'view'
    >
    

    
    governancePublisher: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    markProposalPassed: TypedContractMethod<
      [proposalId: BigNumberish, actionDataHash: BytesLike, ],
      [void],
      'nonpayable'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    relayer: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    renounceOwnership: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    setGovernancePublisher: TypedContractMethod<
      [_publisher: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    setRelayer: TypedContractMethod<
      [_relayer: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    transferOwnership: TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'adminSetAttested'): TypedContractMethod<
      [proposalId: BigNumberish, val: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'adminSetExecuted'): TypedContractMethod<
      [proposalId: BigNumberish, val: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'attestedPassed'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'executeIfAuthorized'): TypedContractMethod<
      [proposalId: BigNumberish, actionData: BytesLike, ],
      [string],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'executed'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'governancePublisher'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'markProposalPassed'): TypedContractMethod<
      [proposalId: BigNumberish, actionDataHash: BytesLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'relayer'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setGovernancePublisher'): TypedContractMethod<
      [_publisher: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'setRelayer'): TypedContractMethod<
      [_relayer: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<
      [newOwner: AddressLike, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'Executed'): TypedContractEvent<ExecutedEvent.InputTuple, ExecutedEvent.OutputTuple, ExecutedEvent.OutputObject>;
getEvent(key: 'GovernancePublisherUpdated'): TypedContractEvent<GovernancePublisherUpdatedEvent.InputTuple, GovernancePublisherUpdatedEvent.OutputTuple, GovernancePublisherUpdatedEvent.OutputObject>;
getEvent(key: 'OwnershipTransferred'): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
getEvent(key: 'ProposalAttested'): TypedContractEvent<ProposalAttestedEvent.InputTuple, ProposalAttestedEvent.OutputTuple, ProposalAttestedEvent.OutputObject>;
getEvent(key: 'RelayerUpdated'): TypedContractEvent<RelayerUpdatedEvent.InputTuple, RelayerUpdatedEvent.OutputTuple, RelayerUpdatedEvent.OutputObject>;

    filters: {
      
      'Executed(uint256,address,bytes)': TypedContractEvent<ExecutedEvent.InputTuple, ExecutedEvent.OutputTuple, ExecutedEvent.OutputObject>;
      Executed: TypedContractEvent<ExecutedEvent.InputTuple, ExecutedEvent.OutputTuple, ExecutedEvent.OutputObject>;
    

      'GovernancePublisherUpdated(address,address)': TypedContractEvent<GovernancePublisherUpdatedEvent.InputTuple, GovernancePublisherUpdatedEvent.OutputTuple, GovernancePublisherUpdatedEvent.OutputObject>;
      GovernancePublisherUpdated: TypedContractEvent<GovernancePublisherUpdatedEvent.InputTuple, GovernancePublisherUpdatedEvent.OutputTuple, GovernancePublisherUpdatedEvent.OutputObject>;
    

      'OwnershipTransferred(address,address)': TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
      OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    

      'ProposalAttested(uint256,bytes32,address)': TypedContractEvent<ProposalAttestedEvent.InputTuple, ProposalAttestedEvent.OutputTuple, ProposalAttestedEvent.OutputObject>;
      ProposalAttested: TypedContractEvent<ProposalAttestedEvent.InputTuple, ProposalAttestedEvent.OutputTuple, ProposalAttestedEvent.OutputObject>;
    

      'RelayerUpdated(address,address)': TypedContractEvent<RelayerUpdatedEvent.InputTuple, RelayerUpdatedEvent.OutputTuple, RelayerUpdatedEvent.OutputObject>;
      RelayerUpdated: TypedContractEvent<RelayerUpdatedEvent.InputTuple, RelayerUpdatedEvent.OutputTuple, RelayerUpdatedEvent.OutputObject>;
    
    };
  }